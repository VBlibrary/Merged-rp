name: Build

on:
  push:
    paths:
      - ".github/workflows/build.yml"
      - "app/**"
  pull_request:
    paths:
      - ".github/workflows/build.yml"
      - "app/**"
  schedule:
    - cron: "22 4 * * *"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name == 'schedule' }}
  cancel-in-progress: true

permissions: {}

jobs:
  build:
    if: ${{ always() }}
    runs-on: ubuntu-latest
    container:
      image: docker.io/zmkfirmware/zmk-build-arm:3.5
    strategy:
      matrix:
        include:
          - board: nice_nano_v2
            shieldArgs: '[{"shield": "rgovision", "cmake-args": "", "nickname": ""}]'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          persist-credentials: false
      - name: Cache west modules
        uses: actions/cache@v4
        env:
          cache-name: cache-zephyr-modules
        with:
          path: |
            modules/
            tools/
            zephyr/
            bootloader/
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('app/west.yml') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
        timeout-minutes: 2
        continue-on-error: true
      - name: Initialize workspace (west init)
        run: west init -l app
      - name: Update modules (west update)
        run: west update
      - name: Export Zephyr CMake package (west zephyr-export)
        run: west zephyr-export
      - name: Use Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "14.x"
      - name: Install @actions/artifact
        run: npm install @actions/artifact
      - name: Build
        uses: actions/github-script@v7
        id: boards-list
        with:
          script: |
            const fs = require('fs');
            const execSync = require('child_process').execSync;
            const buildShieldArgs = JSON.parse(`${{ matrix.shieldArgs }}`);
            let error = false;
            for (const shieldArgs of buildShieldArgs) {
              try {
                console.log(`::group::${{ matrix.board }} ${shieldArgs.shield} Build`)
                const output = execSync(`west build -s app -p -b ${{ matrix.board }} -- ${shieldArgs.shield ? '-DSHIELD="' + shieldArgs.shield + '"' : ''} ${shieldArgs['cmake-args'] || ''}`);
                console.log(output.toString());
              } catch (e) {
                console.error(`::error::Failed to build ${{ matrix.board }} ${shieldArgs.shield} ${shieldArgs['cmake-args']}`);
                console.error(e);
                error = true;
              } finally {
                console.log('::endgroup::');
              }
            }
            if (error) {
              throw new Error('Failed to build one or more configurations');
            }
      - name: Upload artifacts
        uses: actions/github-script@v7
        continue-on-error: ${{ github.event_name == 'pull_request' }}
        id: boards-upload
        with:
          script: |
            const fs = require('fs');
            const { default: artifact } = require('@actions/artifact');
            const buildShieldArgs = JSON.parse(`${{ matrix.shieldArgs }}`);
            let error = false;
            for (const shieldArgs of buildShieldArgs) {
              try {
                console.log(`::group::${{ matrix.board }} ${shieldArgs.shield} Upload`)
                const fileExtensions = ["hex", "uf2"];
                const files = fileExtensions
                  .map(extension => "build/zephyr/zmk." + extension)
                  .filter(path => fs.existsSync(path));
                const rootDirectory = 'build/zephyr';
                const options = {
                    continueOnError: true
                }
                const cmakeName = shieldArgs['cmake-args'] ? '-' + (shieldArgs.nickname || shieldArgs['cmake-args'].split(' ').join('')) : '';
                const artifactName = `${{ matrix.board }}${shieldArgs.shield ? '-' + shieldArgs.shield : ''}${cmakeName}-zmk`;
                await artifact.uploadArtifact(artifactName, files, rootDirectory, options);
              } catch (e) {
                console.error(`::error::Failed to upload ${{ matrix.board }} ${shieldArgs.shield} ${shieldArgs['cmake-args']}`);
                console.error(e);
                error = true;
              } finally {
                console.log('::endgroup::');
              }
            }
            if (error) {
              throw new Error('Failed to build one or more configurations');
            }
